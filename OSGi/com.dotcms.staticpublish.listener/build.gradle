buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.0.0'
    }
}


apply plugin: 'java'
apply plugin: 'biz.aQute.bnd.builder'

// Compile Java.
targetCompatibility = 1.8
sourceCompatibility = 1.8

//targetCompatibility = 11
//sourceCompatibility = 11

version = '0.2'

repositories {
    maven { url "http://repo.dotcms.com/artifactory/libs-release" }
}

dependencies {
    compile('com.dotcms:dotcms:5.1.5') { transitive = true }

    compileOnly('com.hierynomus:sshj:0.23.0'){
        exclude group: 'org.bouncycastle' //Why we exlude? See README's important notes.
    }
    compileOnly('org.slf4j:slf4j-simple:1.7.7')
}

import java.util.jar.*

/////////////////////////
//Plugin jar
/////////////////////////
jar {
    manifest {
        attributes (
                'Bundle-Vendor': 'dotCMS',
                'Bundle-Description': 'dotCMS - OSGI Static Event Listener example',
                'Bundle-DocURL': 'https://dotcms.com/',
                'Bundle-Activator': 'com.dotcms.staticpublish.Activator',
                'Bundle-ClassPath': '''
                    .,
                    libs/eddsa-0.2.0.jar,
                    libs/jzlib-1.1.3.jar,
                    libs/slf4j-api-1.7.7.jar,
                    libs/slf4j-simple-1.7.7.jar,
                    libs/sshj-0.23.0.jar,
                ''',
                'Export-Package':'''
                    org.bouncycastle.jce.provider.*,
                    org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi.*,
                    org.bouncycastle.jcajce.provider.digest.*,
                    org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.*,
                    org.bouncycastle.jcajce.provider.asymmetric.*
                ''',
                'Import-Package': '*;version=0'
        )
    }
}

task copyToLib(type: Copy) {
    into "src/main/resources/libs"
    from configurations.compileOnly
}

jar.dependsOn copyToLib
//jar.finalizedBy 'fragmentJar'

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "dotCMS Actionlet fragment"
    bundleDescription = "dotCMS - OSGI Actionlet example fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}
/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
    return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifestAttributes {
    doFirst {
        File file = configurations.baseline.singleFile
        println "file ${file.getPath()}"
        JarFile jar = new JarFile(file)
        Attributes manifest = jar.getManifest().getMainAttributes()
        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
    }
}
task fragmentJar(type: Jar) {

    if (gradle.startParameter.taskNames.contains("fragmentJar")) {

        File file = configurations.baseline.singleFile
        println "file ${file.getPath()}"
        JarFile jar = new JarFile(file)

        def projectName = project.name
        def jarName = "${projectName}.fragment"
        archivesBaseName = jarName

        println "running fragmentJar: archivesBaseName ${archivesBaseName}, archiveFileName ${archiveFileName.get()}"

        doFirst {

            Attributes coreManifest = jar.getManifest().getMainAttributes()
            bundleSymbolicName = "${coreManifest.getValue('Bundle-SymbolicName')}"
            bundleVersion = "${coreManifest.getValue('Bundle-Version')}"
            importPackage = "${coreManifest.getValue('Import-Package')}"
            bundleManifestVersion = "${coreManifest.getValue('Bundle-ManifestVersion')}"
            bundleDocURL = "${coreManifest.getValue('Bundle-DocURL')}"
            bundleVendor = "${coreManifest.getValue('Bundle-Vendor')}"

            //Setting the fragment jar name
            importPackage = fixVersionNumber(importPackage)
            manifest {
                attributes(
                        'Bundle-Name': "${bundleName}",
                        'Bundle-Description': "${bundleDescription}",
                        'Bundle-Vendor': "${bundleVendor}",
                        'Bundle-Version': "${version}",
                        'Bundle-SymbolicName': "${archivesBaseName}",
                        'Bundle-ManifestVersion': "${bundleManifestVersion}",
                        'Bundle-DocURL': "${bundleDocURL}",
                        'Fragment-Host': "${fragmentHost}",
                        'Export-Package': "${importPackage}"
                )
            }
        }
    }
}

//fragmentJar.dependsOn 'readManifestAttributes'


