plugins {
    id 'biz.aQute.bnd.builder' version '3.3.0'
}

sourceCompatibility = '1.8'
version = '0.2'

repositories {
    maven { url "http://repo.dotcms.com/artifactory/libs-release" }
}

configurations {
    pluginLibs
}

dependencies {
    compile('com.dotcms:dotcms:4.3.2') { transitive = true }
    //Resolve dependencies. These jars can be downloaded from our Maven Repo
    //In case you want to create a Controller using other Spring version,
    //just change the version Attribute.
    pluginLibs group: 'org.springframework', name: 'spring-webmvc', version: '4.3.9.RELEASE'
    pluginLibs group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    pluginLibs group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    pluginLibs group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
    pluginLibs group: 'org.slf4j', name:'slf4j-api', version:'1.7.7'
    pluginLibs group: 'org.slf4j', name:'slf4j-simple', version: '1.7.7'
    pluginLibs group: 'org.slf4j', name:'jcl-over-slf4j', version:'1.7.1'
    pluginLibs group: 'sax', name: 'sax', version: '2.0.1'
    pluginLibs group: 'xml-apis', name: 'xml-apis', version: '1.4.01'
    pluginLibs group: 'xalan', name: 'xalan', version: '2.7.2'
    pluginLibs group: 'xerces', name: 'xercesImpl', version: '2.11.0'
}

import java.util.jar.*

/////////////////////////
//Plugin jar
/////////////////////////
jar {
    manifest {
        attributes (
                'Bundle-Vendor': 'dotCMS',
                'Bundle-Description': 'dotCMS - Spring OSGi Example providing its own Spring for dotcms',
                'Bundle-DocURL': 'https://dotcms.com/',
                'Bundle-Activator': 'com.dotmarketing.osgi.custom.spring.Activator',
                'Bundle-ClassPath' :'''
                    .,
                    libs/commons-io-1.3.2.jar,
                    libs/commons-lang3-3.3.2.jar,
                    libs/sax-2.0.1.jar,
                    libs/jcl-over-slf4j-1.7.1.jar,
                    libs/serializer-2.7.2.jar,
                    libs/slf4j-api-1.7.7.jar,
                    libs/slf4j-simple-1.7.7.jar,
                    libs/spring-aop-4.3.9.RELEASE.jar,
                    libs/spring-beans-4.3.9.RELEASE.jar,
                    libs/spring-context-4.3.9.RELEASE.jar,
                    libs/spring-core-4.3.9.RELEASE.jar,
                    libs/spring-expression-4.3.9.RELEASE.jar,
                    libs/spring-web-4.3.9.RELEASE.jar,
                    libs/spring-webmvc-4.3.9.RELEASE.jar,
                    libs/xalan-2.7.2.jar,
                    libs/xml-apis-1.4.01.jar,
                    libs/xercesImpl-2.11.0.jar
                ''',
                'Import-Package': '''
                    bsh;resolution:=optional,
                    javax.servlet;version=0,
                    javax.servlet.jsp.*;resolution:=optional,
                    javax.servlet.annotation;version=0,
                    javax.servlet.http;version=0,
                    org.apache.velocity.*,					
                    com.dotmarketing.osgi.*,
                    com.dotmarketing.util.*;
                    com.dotmarketing.filters.*,
                    com.dotmarketing.loggers.*,
                    org.apache.logging.log4j.core;version=0,
                    org.apache.logging.log4j;version=0,
                    javax.management.*,
                    org.apache.felix.http.api.*,
                    org.osgi.framework.*,
                '''
        )
    }
}

task copyToLib(type: Copy) {
    into "src/main/resources/libs"
    from configurations.pluginLibs
}

jar.dependsOn copyToLib
jar.finalizedBy 'fragmentJar'

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "dotCMS Custom Spring OSGi fragment"
    bundleDescription = "dotCMS - Spring OSGi Example providing its own Spring for dotcms fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}
/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
    return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
    doFirst {
        File file = configurations.baseline.singleFile
        JarFile jar = new JarFile(file)
        Attributes manifest = jar.getManifest().getMainAttributes()
        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
    }
}
task fragmentJar(type: Jar) {

    doFirst {
        //Setting the fragment jar name
        baseName = project.name
        archiveName = "${baseName}.fragment-${version}.jar"
        importPackage = fixVersionNumber(importPackage)

        manifest {
            attributes (
                    'Bundle-Name': "${bundleName}",
                    'Bundle-Description': "${bundleDescription}",
                    'Bundle-Vendor': "${bundleVendor}",
                    'Bundle-Version': "${version}",
                    'Bundle-SymbolicName': "${baseName}.fragment",
                    'Bundle-ManifestVersion': "${bundleManifestVersion}",
                    'Bundle-DocURL': "${bundleDocURL}",
                    'Fragment-Host': "${fragmentHost}",
                    'Export-Package': "${importPackage}"
            )
        }
    }
}
fragmentJar.dependsOn 'readManifesttAttributes'

tasks.copyToLib.execute()
task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}